#!/bin/bash
set -e

USAGE="mkfile [actions] file..."

HELP="\
Create files and simultaneously perform a series of actions on the file.

USAGE: $USAGE

ACTIONS
-------
-S            Adds the bash shebang to the top of the file
-s <path>     uses the <path> supplied as shebang.
e.g if you supplied \"/usr/bin/node\",
your shebang would now be \"#!/usr/bin/node\"
-E            Edit the created file using vi
-e <editor>   Edit the created file using the <editor>
-X            Make the created file executable
-x <mode>     Change the mode of the file created to <mode>
-N            Spawns a new shell inside the current one
-n <shell>    Spawns a new <shell> inside the current one
-I            Add file to .gitignore
-i <path>     Adds <path> to .gitignore
-A            Adds the created file to git
-a <path>     Adds <path> to git
-f            Force creation of file even when they already exist

These actions all have a default way they operate and to use the default mode, specify the action in uppercase e.g -C -X.
To alter the way the action works by default, specify the action in small letters e.g -c -x.
The default mode does not accept arguments but they other mode does.

NOTE: Every action specified would be performed on each file created.

NOTICE: Most actions have a default way of operating, and this is always specified using a uppercase letter ie. -X makes a file executable. The default mode accepts no argument, to supply one, you have to use the other form which is always the lowercase letter ie. -x accepts a mode (e.g +777) and sets it on each file specified.
"

if [[ -z "$@" ]]; then
    echo "$USAGE" >&2
    exit 1
fi

SHEBANG=""
EDITOR=""
GIT_ADD=""
FILE_MODE=""
SPAWN_SHELL=""
GIT_IGNORE=""
FORCE=0

while getopts "hSs:Ee:Xx:Nn:Ii:Aa:Cc:Pp:f" opt; do
    case "${opt}" in
    h ) echo "$HELP" && exit 0;;
    s )
        if [[ -n "$OPTARG" ]]; then
            SHEBANG="#!$OPTARG"
        fi
    ;;
    S ) SHEBANG="#!/bin/bash";;
    e )
        if [[ -n "$OPTARG" ]]; then
            EDITOR="$OPTARG"
        fi
    ;;
    E ) EDITOR="vi";;
    i )
        if [[ -n "$OPTARG" ]]; then
            GIT_IGNORE="$OPTARG"
        fi
    ;;
    I ) GIT_IGNORE="...";;
    a )
        if [[ -n "$OPTARG" ]]; then
            GIT_ADD="$OPTARG"
        fi
    ;;
    A ) GIT_ADD="...";;
    x )
        if [[ -n "$OPTARG" ]]; then
            FILE_MODE="$OPTARG"
        fi
    ;;
    X ) FILE_MODE="u+x";;
    n )
        if [[ -n "$OPTARG" ]]; then
            SPAWN_SHELL="$OPTARG"
        fi
    ;;
    N ) SPAWN_SHELL="$SHELL";;
    f ) FORCE=1;;
    \? ) echo "Invalid option: $OPTARG" >&2 && exit 2;;
    : ) echo "$OPTARG requires an argument" >&2 && exit 3;
    esac
done
shift $(expr $OPTIND - 1)

if [[ $# = 0 ]]; then
    echo 'no filename specified' >&2
    exit 1
elif [[ -e "$1" ]] && [ $FORCE -eq 0 ]; then
    echo "file named '$1' already exists" >&2
    echo "use -f to ignore this warning (file might be overwritten)" >&2
    exit 4
    
fi

for f in "$@"
do
    # create file
    touch "$f"

    # add shebang
    if [[ -n "$SHEBANG" ]]; then
        echo "adding shebang '$SHEBANG' to '$f'"
        echo "$SHEBANG" > "$f"
    fi

    # open file in editor
    if [[ -n "$EDITOR" ]]; then
        echo "opening '$f' using '$EDITOR'"
        $EDITOR $f
    fi

    # change file mode
    if [[ -n "$FILE_MODE" ]]; then
        echo "changing file permissions of '$f'"
        chmod "$FILE_MODE" "$f"
    fi

    # spawn a new shell (to do some other thing with file)
    if [[ -n "$SPAWN_SHELL" ]]; then
        echo "spawning a new '$SPAWN_SHELL' shell"
        $SPAWN_SHELL
    fi

    # add file to git
    if [[ -n "$GIT_ADD" ]]; then
        if [ $GIT_ADD == '...' ]; then
            GIT_ADD="$f"
        fi
        echo "adding '$GIT_ADD' to git"
        git add $GIT_ADD
    fi

    # add file to .gitignore
    if [[ -n "$GIT_IGNORE" ]]; then
        if [ $GIT_IGNORE == '...' ]; then
            GIT_IGNORE="$f"
        fi
        echo "adding '$GIT_IGNORE' to .gitignore"
        $(dirname "$0")/gitignore "$GIT_IGNORE"
    fi
done